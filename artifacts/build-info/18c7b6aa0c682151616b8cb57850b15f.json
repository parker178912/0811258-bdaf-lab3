{"id":"18c7b6aa0c682151616b8cb57850b15f","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"contracts/BankContract.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.17;\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ncontract BankContract{\n    using SafeMath for uint256;\n    mapping(address => mapping(address => uint256)) private balances;\n    \n    function deposit(address token_address, uint256 amount) public{\n        require(amount > 0, \"Deposit amount must greater than 0\");\n        require(token_address != address(0), \"Can't send token to 0x00..\");\n        require(IERC20(token_address).transferFrom(msg.sender,address(this), amount), \"Transfer failed\");\n        balances[msg.sender][token_address] += amount;\n    }\n    \n    function withdraw(address token_address, uint256 amount) public{\n        require(amount > 0, \"Withdraw amount must greater than 0\");\n        require(balances[msg.sender][token_address] >= amount, \"You don't have enough amount to withdraw\");\n        balances[msg.sender][token_address] -= amount;\n        require(IERC20(token_address).transfer(msg.sender, amount), \"Transfer failed\");\n    }\n    \n    function getBalance(address token_address) public view returns(uint256 balance){\n        return balances[msg.sender][token_address];\n    }\n}"},"contracts/ERC20.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\ncontract ERC20 is IERC20{\n    using SafeMath for uint256;\n    \n    uint256 private _totalSupply;\n    mapping(address => uint256)  _balances;\n    mapping(address => mapping(address => uint256)) _approve;\n    constructor(){\n        _balances[msg.sender]=10000;\n        _totalSupply=10000;\n    }\n\n    function totalSupply() external view returns (uint256){\n        return _totalSupply;\n    }\n    \n    function balanceOf(address your_address) external view returns (uint256 balance){\n        return _balances[your_address];\n    }\n\n    function _transfer(address from, address to, uint256 amount) internal returns (bool success){\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n        emit Transfer(from, to, amount);\n        return true;\n    }   \n\n    function transfer(address to, uint256 amount) external returns (bool success){\n        return _transfer(msg.sender, to, amount);\n    }\n    \n    function allowance(address allow_address, address approve_address) external view returns (uint256 remain_amount){\n        return _approve[allow_address][approve_address];\n    }\n  \n    function approve(address approve_address, uint256 amount) external returns (bool success){\n        _approve[msg.sender][approve_address] = amount;\n        emit Approval(msg.sender, approve_address, amount);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) external returns (bool success){\n        _approve[from][msg.sender] = _approve[from][msg.sender].sub(amount);\n        return _transfer(from, to, amount);\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[80]},"id":3,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:0"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3,"sourceUnit":81,"src":"115:35:0","symbolAliases":[],"unitAlias":""}],"src":"90:61:0"},"id":0},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[80]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"131:70:1","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":80,"linearizedBaseContracts":[80],"name":"IERC20","nameLocation":"212:6:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"225:158:1","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":14,"name":"Transfer","nameLocation":"394:8:1","nodeType":"EventDefinition","parameters":{"id":13,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:1","nodeType":"VariableDeclaration","scope":14,"src":"403:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":10,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:1","nodeType":"VariableDeclaration","scope":14,"src":"425:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:1","nodeType":"VariableDeclaration","scope":14,"src":"445:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":11,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:1"},"src":"388:72:1"},{"anonymous":false,"documentation":{"id":15,"nodeType":"StructuredDocumentation","src":"466:148:1","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":23,"name":"Approval","nameLocation":"625:8:1","nodeType":"EventDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:1","nodeType":"VariableDeclaration","scope":23,"src":"634:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":16,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":19,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:1","nodeType":"VariableDeclaration","scope":23,"src":"657:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":21,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:1","nodeType":"VariableDeclaration","scope":23,"src":"682:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":20,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:1"},"src":"619:78:1"},{"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"703:66:1","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":29,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:1","nodeType":"FunctionDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"794:2:1"},"returnParameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":29,"src":"820:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":26,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:1"},"scope":80,"src":"774:55:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":30,"nodeType":"StructuredDocumentation","src":"835:72:1","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":37,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:1","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"account","nameLocation":"939:7:1","nodeType":"VariableDeclaration","scope":37,"src":"931:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:1"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":37,"src":"971:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":34,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:1"},"scope":80,"src":"912:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"986:202:1","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":47,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:1","nodeType":"FunctionDefinition","parameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"to","nameLocation":"1219:2:1","nodeType":"VariableDeclaration","scope":47,"src":"1211:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":39,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"amount","nameLocation":"1231:6:1","nodeType":"VariableDeclaration","scope":47,"src":"1223:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":41,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:1"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":47,"src":"1257:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:1"},"scope":80,"src":"1193:70:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":48,"nodeType":"StructuredDocumentation","src":"1269:264:1","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":57,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:1","nodeType":"FunctionDefinition","parameters":{"id":53,"nodeType":"ParameterList","parameters":[{"constant":false,"id":50,"mutability":"mutable","name":"owner","nameLocation":"1565:5:1","nodeType":"VariableDeclaration","scope":57,"src":"1557:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":49,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":52,"mutability":"mutable","name":"spender","nameLocation":"1580:7:1","nodeType":"VariableDeclaration","scope":57,"src":"1572:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":51,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:1"},"returnParameters":{"id":56,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":57,"src":"1612:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":54,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:1"},"scope":80,"src":"1538:83:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":58,"nodeType":"StructuredDocumentation","src":"1627:642:1","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":67,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:1","nodeType":"FunctionDefinition","parameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"spender","nameLocation":"2299:7:1","nodeType":"VariableDeclaration","scope":67,"src":"2291:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":59,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":62,"mutability":"mutable","name":"amount","nameLocation":"2316:6:1","nodeType":"VariableDeclaration","scope":67,"src":"2308:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":61,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:1"},"returnParameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"2342:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":64,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:1"},"scope":80,"src":"2274:74:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"2354:287:1","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":79,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:1","nodeType":"FunctionDefinition","parameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"from","nameLocation":"2685:4:1","nodeType":"VariableDeclaration","scope":79,"src":"2677:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":69,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":72,"mutability":"mutable","name":"to","nameLocation":"2707:2:1","nodeType":"VariableDeclaration","scope":79,"src":"2699:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":71,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":74,"mutability":"mutable","name":"amount","nameLocation":"2727:6:1","nodeType":"VariableDeclaration","scope":79,"src":"2719:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":73,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:1"},"returnParameters":{"id":78,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":79,"src":"2758:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":76,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:1"},"scope":80,"src":"2646:118:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":81,"src":"202:2564:1","usedErrors":[]}],"src":"106:2661:1"},"id":1},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","exportedSymbols":{"SafeMath":[392]},"id":393,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"285:196:2","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":392,"linearizedBaseContracts":[392],"name":"SafeMath","nameLocation":"490:8:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":114,"nodeType":"Block","src":"717:140:2","statements":[{"id":113,"nodeType":"UncheckedBlock","src":"727:124:2","statements":[{"assignments":[96],"declarations":[{"constant":false,"id":96,"mutability":"mutable","name":"c","nameLocation":"759:1:2","nodeType":"VariableDeclaration","scope":113,"src":"751:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":95,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":100,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":97,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"763:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":98,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"767:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"763:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"751:17:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":101,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"786:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":102,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"790:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"786:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":108,"nodeType":"IfStatement","src":"782:28:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"801:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"808:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":106,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"800:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":94,"id":107,"nodeType":"Return","src":"793:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"832:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":110,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"838:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":111,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"831:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":94,"id":112,"nodeType":"Return","src":"824:16:2"}]}]},"documentation":{"id":84,"nodeType":"StructuredDocumentation","src":"505:131:2","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":115,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"650:6:2","nodeType":"FunctionDefinition","parameters":{"id":89,"nodeType":"ParameterList","parameters":[{"constant":false,"id":86,"mutability":"mutable","name":"a","nameLocation":"665:1:2","nodeType":"VariableDeclaration","scope":115,"src":"657:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":85,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":88,"mutability":"mutable","name":"b","nameLocation":"676:1:2","nodeType":"VariableDeclaration","scope":115,"src":"668:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":87,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:22:2"},"returnParameters":{"id":94,"nodeType":"ParameterList","parameters":[{"constant":false,"id":91,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":115,"src":"702:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":90,"name":"bool","nodeType":"ElementaryTypeName","src":"702:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":93,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":115,"src":"708:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":92,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:15:2"},"scope":392,"src":"641:216:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":142,"nodeType":"Block","src":"1078:113:2","statements":[{"id":141,"nodeType":"UncheckedBlock","src":"1088:97:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":127,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"1116:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":128,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"1120:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1116:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":134,"nodeType":"IfStatement","src":"1112:28:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1131:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":132,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1130:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":126,"id":133,"nodeType":"Return","src":"1123:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1162:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":136,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"1168:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":137,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"1172:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1168:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":139,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1161:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":126,"id":140,"nodeType":"Return","src":"1154:20:2"}]}]},"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"863:134:2","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":143,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1011:6:2","nodeType":"FunctionDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"a","nameLocation":"1026:1:2","nodeType":"VariableDeclaration","scope":143,"src":"1018:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":117,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":120,"mutability":"mutable","name":"b","nameLocation":"1037:1:2","nodeType":"VariableDeclaration","scope":143,"src":"1029:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":119,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:22:2"},"returnParameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":143,"src":"1063:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":122,"name":"bool","nodeType":"ElementaryTypeName","src":"1063:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":143,"src":"1069:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":124,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1062:15:2"},"scope":392,"src":"1002:189:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":184,"nodeType":"Block","src":"1415:417:2","statements":[{"id":183,"nodeType":"UncheckedBlock","src":"1425:401:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":155,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1683:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1683:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":162,"nodeType":"IfStatement","src":"1679:28:2","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1705:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":160,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1698:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":154,"id":161,"nodeType":"Return","src":"1691:16:2"}},{"assignments":[164],"declarations":[{"constant":false,"id":164,"mutability":"mutable","name":"c","nameLocation":"1729:1:2","nodeType":"VariableDeclaration","scope":183,"src":"1721:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":163,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":168,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":165,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1733:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":166,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"1737:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1733:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1721:17:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":169,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"1756:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":170,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1760:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":172,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":148,"src":"1765:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":178,"nodeType":"IfStatement","src":"1752:33:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1776:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":176,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1775:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":154,"id":177,"nodeType":"Return","src":"1768:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1807:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":180,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"1813:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":181,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1806:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":154,"id":182,"nodeType":"Return","src":"1799:16:2"}]}]},"documentation":{"id":144,"nodeType":"StructuredDocumentation","src":"1197:137:2","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":185,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1348:6:2","nodeType":"FunctionDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":146,"mutability":"mutable","name":"a","nameLocation":"1363:1:2","nodeType":"VariableDeclaration","scope":185,"src":"1355:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":145,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":148,"mutability":"mutable","name":"b","nameLocation":"1374:1:2","nodeType":"VariableDeclaration","scope":185,"src":"1366:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":147,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1354:22:2"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":185,"src":"1400:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":150,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":185,"src":"1406:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":152,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:15:2"},"scope":392,"src":"1339:493:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":212,"nodeType":"Block","src":"2057:114:2","statements":[{"id":211,"nodeType":"UncheckedBlock","src":"2067:98:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":197,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"2095:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2100:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2095:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":204,"nodeType":"IfStatement","src":"2091:29:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2111:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":202,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2110:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":196,"id":203,"nodeType":"Return","src":"2103:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2142:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":206,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":188,"src":"2148:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":207,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"2152:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2148:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":209,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2141:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":196,"id":210,"nodeType":"Return","src":"2134:20:2"}]}]},"documentation":{"id":186,"nodeType":"StructuredDocumentation","src":"1838:138:2","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":213,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1990:6:2","nodeType":"FunctionDefinition","parameters":{"id":191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"a","nameLocation":"2005:1:2","nodeType":"VariableDeclaration","scope":213,"src":"1997:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":187,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":190,"mutability":"mutable","name":"b","nameLocation":"2016:1:2","nodeType":"VariableDeclaration","scope":213,"src":"2008:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":189,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:22:2"},"returnParameters":{"id":196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":213,"src":"2042:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":192,"name":"bool","nodeType":"ElementaryTypeName","src":"2042:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":213,"src":"2048:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":194,"name":"uint256","nodeType":"ElementaryTypeName","src":"2048:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2041:15:2"},"scope":392,"src":"1981:190:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":240,"nodeType":"Block","src":"2406:114:2","statements":[{"id":239,"nodeType":"UncheckedBlock","src":"2416:98:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":225,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"2444:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2449:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2444:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":232,"nodeType":"IfStatement","src":"2440:29:2","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2460:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2467:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":230,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2459:10:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":224,"id":231,"nodeType":"Return","src":"2452:17:2"}},{"expression":{"components":[{"hexValue":"74727565","id":233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2491:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":234,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"2497:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":235,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"2501:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2497:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":237,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2490:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":224,"id":238,"nodeType":"Return","src":"2483:20:2"}]}]},"documentation":{"id":214,"nodeType":"StructuredDocumentation","src":"2177:148:2","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":241,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2339:6:2","nodeType":"FunctionDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"mutability":"mutable","name":"a","nameLocation":"2354:1:2","nodeType":"VariableDeclaration","scope":241,"src":"2346:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":215,"name":"uint256","nodeType":"ElementaryTypeName","src":"2346:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":218,"mutability":"mutable","name":"b","nameLocation":"2365:1:2","nodeType":"VariableDeclaration","scope":241,"src":"2357:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2345:22:2"},"returnParameters":{"id":224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":221,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":241,"src":"2391:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":220,"name":"bool","nodeType":"ElementaryTypeName","src":"2391:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":241,"src":"2397:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":222,"name":"uint256","nodeType":"ElementaryTypeName","src":"2397:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2390:15:2"},"scope":392,"src":"2330:190:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":255,"nodeType":"Block","src":"2822:29:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":251,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"2839:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":252,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"2843:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2839:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":250,"id":254,"nodeType":"Return","src":"2832:12:2"}]},"documentation":{"id":242,"nodeType":"StructuredDocumentation","src":"2526:224:2","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":256,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2764:3:2","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":244,"mutability":"mutable","name":"a","nameLocation":"2776:1:2","nodeType":"VariableDeclaration","scope":256,"src":"2768:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":243,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":246,"mutability":"mutable","name":"b","nameLocation":"2787:1:2","nodeType":"VariableDeclaration","scope":256,"src":"2779:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":245,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2767:22:2"},"returnParameters":{"id":250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":256,"src":"2813:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":248,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:9:2"},"scope":392,"src":"2755:96:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":270,"nodeType":"Block","src":"3189:29:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":266,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"3206:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":267,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"3210:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3206:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":265,"id":269,"nodeType":"Return","src":"3199:12:2"}]},"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"2857:260:2","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":271,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3131:3:2","nodeType":"FunctionDefinition","parameters":{"id":262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":259,"mutability":"mutable","name":"a","nameLocation":"3143:1:2","nodeType":"VariableDeclaration","scope":271,"src":"3135:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":258,"name":"uint256","nodeType":"ElementaryTypeName","src":"3135:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":261,"mutability":"mutable","name":"b","nameLocation":"3154:1:2","nodeType":"VariableDeclaration","scope":271,"src":"3146:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":260,"name":"uint256","nodeType":"ElementaryTypeName","src":"3146:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3134:22:2"},"returnParameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":271,"src":"3180:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":263,"name":"uint256","nodeType":"ElementaryTypeName","src":"3180:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3179:9:2"},"scope":392,"src":"3122:96:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":285,"nodeType":"Block","src":"3532:29:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":281,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"3549:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":282,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"3553:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3549:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":280,"id":284,"nodeType":"Return","src":"3542:12:2"}]},"documentation":{"id":272,"nodeType":"StructuredDocumentation","src":"3224:236:2","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":286,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3474:3:2","nodeType":"FunctionDefinition","parameters":{"id":277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"a","nameLocation":"3486:1:2","nodeType":"VariableDeclaration","scope":286,"src":"3478:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":273,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":276,"mutability":"mutable","name":"b","nameLocation":"3497:1:2","nodeType":"VariableDeclaration","scope":286,"src":"3489:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":275,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:22:2"},"returnParameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":286,"src":"3523:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":278,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3522:9:2"},"scope":392,"src":"3465:96:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":300,"nodeType":"Block","src":"3917:29:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":296,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"3934:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":297,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"3938:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3934:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":295,"id":299,"nodeType":"Return","src":"3927:12:2"}]},"documentation":{"id":287,"nodeType":"StructuredDocumentation","src":"3567:278:2","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":301,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"3859:3:2","nodeType":"FunctionDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":289,"mutability":"mutable","name":"a","nameLocation":"3871:1:2","nodeType":"VariableDeclaration","scope":301,"src":"3863:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":288,"name":"uint256","nodeType":"ElementaryTypeName","src":"3863:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":291,"mutability":"mutable","name":"b","nameLocation":"3882:1:2","nodeType":"VariableDeclaration","scope":301,"src":"3874:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":290,"name":"uint256","nodeType":"ElementaryTypeName","src":"3874:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3862:22:2"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":301,"src":"3908:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":293,"name":"uint256","nodeType":"ElementaryTypeName","src":"3908:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3907:9:2"},"scope":392,"src":"3850:96:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":315,"nodeType":"Block","src":"4466:29:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":311,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"4483:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":312,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"4487:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":310,"id":314,"nodeType":"Return","src":"4476:12:2"}]},"documentation":{"id":302,"nodeType":"StructuredDocumentation","src":"3952:442:2","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":316,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4408:3:2","nodeType":"FunctionDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":304,"mutability":"mutable","name":"a","nameLocation":"4420:1:2","nodeType":"VariableDeclaration","scope":316,"src":"4412:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":303,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":306,"mutability":"mutable","name":"b","nameLocation":"4431:1:2","nodeType":"VariableDeclaration","scope":316,"src":"4423:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":305,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4411:22:2"},"returnParameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":316,"src":"4457:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":308,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:9:2"},"scope":392,"src":"4399:96:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":340,"nodeType":"Block","src":"5084:106:2","statements":[{"id":339,"nodeType":"UncheckedBlock","src":"5094:90:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":329,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"5126:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":330,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"5131:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5126:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":332,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"5134:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":328,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5118:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5118:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":334,"nodeType":"ExpressionStatement","src":"5118:29:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":335,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"5168:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":336,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":321,"src":"5172:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":327,"id":338,"nodeType":"Return","src":"5161:12:2"}]}]},"documentation":{"id":317,"nodeType":"StructuredDocumentation","src":"4501:453:2","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":341,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4968:3:2","nodeType":"FunctionDefinition","parameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":319,"mutability":"mutable","name":"a","nameLocation":"4989:1:2","nodeType":"VariableDeclaration","scope":341,"src":"4981:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":318,"name":"uint256","nodeType":"ElementaryTypeName","src":"4981:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":321,"mutability":"mutable","name":"b","nameLocation":"5008:1:2","nodeType":"VariableDeclaration","scope":341,"src":"5000:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":320,"name":"uint256","nodeType":"ElementaryTypeName","src":"5000:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":323,"mutability":"mutable","name":"errorMessage","nameLocation":"5033:12:2","nodeType":"VariableDeclaration","scope":341,"src":"5019:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":322,"name":"string","nodeType":"ElementaryTypeName","src":"5019:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4971:80:2"},"returnParameters":{"id":327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":341,"src":"5075:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":325,"name":"uint256","nodeType":"ElementaryTypeName","src":"5075:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5074:9:2"},"scope":392,"src":"4959:231:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":365,"nodeType":"Block","src":"5799:105:2","statements":[{"id":364,"nodeType":"UncheckedBlock","src":"5809:89:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":354,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"5841:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5845:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5841:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":357,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"5848:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":353,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5833:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5833:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":359,"nodeType":"ExpressionStatement","src":"5833:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":360,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"5882:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":361,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"5886:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5882:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":352,"id":363,"nodeType":"Return","src":"5875:12:2"}]}]},"documentation":{"id":342,"nodeType":"StructuredDocumentation","src":"5196:473:2","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":366,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5683:3:2","nodeType":"FunctionDefinition","parameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"a","nameLocation":"5704:1:2","nodeType":"VariableDeclaration","scope":366,"src":"5696:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":343,"name":"uint256","nodeType":"ElementaryTypeName","src":"5696:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":346,"mutability":"mutable","name":"b","nameLocation":"5723:1:2","nodeType":"VariableDeclaration","scope":366,"src":"5715:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":345,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":348,"mutability":"mutable","name":"errorMessage","nameLocation":"5748:12:2","nodeType":"VariableDeclaration","scope":366,"src":"5734:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":347,"name":"string","nodeType":"ElementaryTypeName","src":"5734:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5686:80:2"},"returnParameters":{"id":352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":366,"src":"5790:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":350,"name":"uint256","nodeType":"ElementaryTypeName","src":"5790:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5789:9:2"},"scope":392,"src":"5674:230:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":390,"nodeType":"Block","src":"6675:105:2","statements":[{"id":389,"nodeType":"UncheckedBlock","src":"6685:89:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":379,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"6717:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6721:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6717:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":382,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"6724:12:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":378,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6709:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6709:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":384,"nodeType":"ExpressionStatement","src":"6709:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":385,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":369,"src":"6758:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":386,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"6762:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6758:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":377,"id":388,"nodeType":"Return","src":"6751:12:2"}]}]},"documentation":{"id":367,"nodeType":"StructuredDocumentation","src":"5910:635:2","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":391,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"6559:3:2","nodeType":"FunctionDefinition","parameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":369,"mutability":"mutable","name":"a","nameLocation":"6580:1:2","nodeType":"VariableDeclaration","scope":391,"src":"6572:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":368,"name":"uint256","nodeType":"ElementaryTypeName","src":"6572:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":371,"mutability":"mutable","name":"b","nameLocation":"6599:1:2","nodeType":"VariableDeclaration","scope":391,"src":"6591:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":370,"name":"uint256","nodeType":"ElementaryTypeName","src":"6591:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":373,"mutability":"mutable","name":"errorMessage","nameLocation":"6624:12:2","nodeType":"VariableDeclaration","scope":391,"src":"6610:26:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":372,"name":"string","nodeType":"ElementaryTypeName","src":"6610:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6562:80:2"},"returnParameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":391,"src":"6666:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":375,"name":"uint256","nodeType":"ElementaryTypeName","src":"6666:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6665:9:2"},"scope":392,"src":"6550:230:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":393,"src":"482:6300:2","usedErrors":[]}],"src":"107:6676:2"},"id":2},"contracts/BankContract.sol":{"ast":{"absolutePath":"contracts/BankContract.sol","exportedSymbols":{"BankContract":[519],"IERC20":[80],"SafeMath":[392]},"id":520,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":394,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"36:24:3"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":395,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":520,"sourceUnit":393,"src":"61:57:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":396,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":520,"sourceUnit":3,"src":"119:55:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"BankContract","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":519,"linearizedBaseContracts":[519],"name":"BankContract","nameLocation":"185:12:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":399,"libraryName":{"id":397,"name":"SafeMath","nameLocations":["209:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":392,"src":"209:8:3"},"nodeType":"UsingForDirective","src":"203:27:3","typeName":{"id":398,"name":"uint256","nodeType":"ElementaryTypeName","src":"222:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":405,"mutability":"mutable","name":"balances","nameLocation":"291:8:3","nodeType":"VariableDeclaration","scope":519,"src":"235:64:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":404,"keyType":{"id":400,"name":"address","nodeType":"ElementaryTypeName","src":"243:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"235:47:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":403,"keyType":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"262:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"254:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"273:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"body":{"id":454,"nodeType":"Block","src":"372:311:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":413,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"390:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"399:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"390:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4465706f73697420616d6f756e74206d7573742067726561746572207468616e2030","id":416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"402:36:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8620eadac7563a75825f41256ba289ad9cd1aaf877a23cf55191c4122e1955eb","typeString":"literal_string \"Deposit amount must greater than 0\""},"value":"Deposit amount must greater than 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8620eadac7563a75825f41256ba289ad9cd1aaf877a23cf55191c4122e1955eb","typeString":"literal_string \"Deposit amount must greater than 0\""}],"id":412,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"382:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"382:57:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":418,"nodeType":"ExpressionStatement","src":"382:57:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":420,"name":"token_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"457:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"482:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"474:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"474:7:3","typeDescriptions":{}}},"id":424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"474:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"457:27:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e27742073656e6420746f6b656e20746f20307830302e2e","id":426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"486:28:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7bfde2de66abc740731f51ba5d38492ad35cc8221fc085fe24a7253addb210ac","typeString":"literal_string \"Can't send token to 0x00..\""},"value":"Can't send token to 0x00.."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7bfde2de66abc740731f51ba5d38492ad35cc8221fc085fe24a7253addb210ac","typeString":"literal_string \"Can't send token to 0x00..\""}],"id":419,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"449:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"449:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":428,"nodeType":"ExpressionStatement","src":"449:66:3"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":434,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"568:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"572:6:3","memberName":"sender","nodeType":"MemberAccess","src":"568:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":438,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"587:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_BankContract_$519","typeString":"contract BankContract"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BankContract_$519","typeString":"contract BankContract"}],"id":437,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"579:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":436,"name":"address","nodeType":"ElementaryTypeName","src":"579:7:3","typeDescriptions":{}}},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"579:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":440,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"594:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":431,"name":"token_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"540:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":430,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"533:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$80_$","typeString":"type(contract IERC20)"}},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"533:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$80","typeString":"contract IERC20"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"555:12:3","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":79,"src":"533:34:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"533:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"603:17:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":429,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"525:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"525:96:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":444,"nodeType":"ExpressionStatement","src":"525:96:3"},{"expression":{"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":445,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"631:8:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":449,"indexExpression":{"expression":{"id":446,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"640:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"644:6:3","memberName":"sender","nodeType":"MemberAccess","src":"640:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"631:20:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":450,"indexExpression":{"id":448,"name":"token_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"652:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"631:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":451,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"670:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"631:45:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":453,"nodeType":"ExpressionStatement","src":"631:45:3"}]},"functionSelector":"47e7ef24","id":455,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"319:7:3","nodeType":"FunctionDefinition","parameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"token_address","nameLocation":"335:13:3","nodeType":"VariableDeclaration","scope":455,"src":"327:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"327:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":409,"mutability":"mutable","name":"amount","nameLocation":"358:6:3","nodeType":"VariableDeclaration","scope":455,"src":"350:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":408,"name":"uint256","nodeType":"ElementaryTypeName","src":"350:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"326:39:3"},"returnParameters":{"id":411,"nodeType":"ParameterList","parameters":[],"src":"372:0:3"},"scope":519,"src":"310:373:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":502,"nodeType":"Block","src":"756:326:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":463,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"774:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"783:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"774:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"576974686472617720616d6f756e74206d7573742067726561746572207468616e2030","id":466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"786:37:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b9c11d7a792a26904d2900b63d4521bd7139384d48ae9cf3eaaa3eaf6fb5a795","typeString":"literal_string \"Withdraw amount must greater than 0\""},"value":"Withdraw amount must greater than 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b9c11d7a792a26904d2900b63d4521bd7139384d48ae9cf3eaaa3eaf6fb5a795","typeString":"literal_string \"Withdraw amount must greater than 0\""}],"id":462,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"766:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"766:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":468,"nodeType":"ExpressionStatement","src":"766:58:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":470,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"842:8:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":473,"indexExpression":{"expression":{"id":471,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"851:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"855:6:3","memberName":"sender","nodeType":"MemberAccess","src":"851:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"842:20:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":475,"indexExpression":{"id":474,"name":"token_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"863:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"842:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":476,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"881:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"842:45:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f7520646f6e2774206861766520656e6f75676820616d6f756e7420746f207769746864726177","id":478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"889:42:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_3c6685f9bbc8eb3988afc169611a07713bcdb12bc76fe4b7c0816f2d975a24d7","typeString":"literal_string \"You don't have enough amount to withdraw\""},"value":"You don't have enough amount to withdraw"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3c6685f9bbc8eb3988afc169611a07713bcdb12bc76fe4b7c0816f2d975a24d7","typeString":"literal_string \"You don't have enough amount to withdraw\""}],"id":469,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"834:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"834:98:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":480,"nodeType":"ExpressionStatement","src":"834:98:3"},{"expression":{"id":488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":481,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"942:8:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":485,"indexExpression":{"expression":{"id":482,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"951:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"955:6:3","memberName":"sender","nodeType":"MemberAccess","src":"951:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"942:20:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":486,"indexExpression":{"id":484,"name":"token_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"963:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"942:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":487,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"981:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:45:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":489,"nodeType":"ExpressionStatement","src":"942:45:3"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":495,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1036:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":497,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"1048:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":492,"name":"token_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"1012:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":491,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1005:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$80_$","typeString":"type(contract IERC20)"}},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1005:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$80","typeString":"contract IERC20"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1027:8:3","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":47,"src":"1005:30:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1005:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1057:17:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":490,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"997:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"997:78:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":501,"nodeType":"ExpressionStatement","src":"997:78:3"}]},"functionSelector":"f3fef3a3","id":503,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"702:8:3","nodeType":"FunctionDefinition","parameters":{"id":460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":457,"mutability":"mutable","name":"token_address","nameLocation":"719:13:3","nodeType":"VariableDeclaration","scope":503,"src":"711:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":456,"name":"address","nodeType":"ElementaryTypeName","src":"711:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":459,"mutability":"mutable","name":"amount","nameLocation":"742:6:3","nodeType":"VariableDeclaration","scope":503,"src":"734:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":458,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"710:39:3"},"returnParameters":{"id":461,"nodeType":"ParameterList","parameters":[],"src":"756:0:3"},"scope":519,"src":"693:389:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":517,"nodeType":"Block","src":"1171:59:3","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":510,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"1188:8:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":513,"indexExpression":{"expression":{"id":511,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1197:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1201:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1197:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1188:20:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":515,"indexExpression":{"id":514,"name":"token_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"1209:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1188:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":509,"id":516,"nodeType":"Return","src":"1181:42:3"}]},"functionSelector":"f8b2cb4f","id":518,"implemented":true,"kind":"function","modifiers":[],"name":"getBalance","nameLocation":"1101:10:3","nodeType":"FunctionDefinition","parameters":{"id":506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":505,"mutability":"mutable","name":"token_address","nameLocation":"1120:13:3","nodeType":"VariableDeclaration","scope":518,"src":"1112:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":504,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1111:23:3"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":508,"mutability":"mutable","name":"balance","nameLocation":"1163:7:3","nodeType":"VariableDeclaration","scope":518,"src":"1155:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":507,"name":"uint256","nodeType":"ElementaryTypeName","src":"1155:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1154:17:3"},"scope":519,"src":"1092:138:3","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":520,"src":"176:1056:3","usedErrors":[]}],"src":"36:1196:3"},"id":3},"contracts/ERC20.sol":{"ast":{"absolutePath":"contracts/ERC20.sol","exportedSymbols":{"ERC20":[714],"IERC20":[80],"SafeMath":[392]},"id":715,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":521,"literals":["solidity","^","0.8",".17"],"nodeType":"PragmaDirective","src":"36:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":522,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":715,"sourceUnit":393,"src":"62:57:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":523,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":715,"sourceUnit":3,"src":"120:55:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":524,"name":"IERC20","nameLocations":["194:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":80,"src":"194:6:4"},"id":525,"nodeType":"InheritanceSpecifier","src":"194:6:4"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":714,"linearizedBaseContracts":[714,80],"name":"ERC20","nameLocation":"185:5:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":528,"libraryName":{"id":526,"name":"SafeMath","nameLocations":["212:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":392,"src":"212:8:4"},"nodeType":"UsingForDirective","src":"206:27:4","typeName":{"id":527,"name":"uint256","nodeType":"ElementaryTypeName","src":"225:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":530,"mutability":"mutable","name":"_totalSupply","nameLocation":"259:12:4","nodeType":"VariableDeclaration","scope":714,"src":"243:28:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"243:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":534,"mutability":"mutable","name":"_balances","nameLocation":"306:9:4","nodeType":"VariableDeclaration","scope":714,"src":"277:38:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":533,"keyType":{"id":531,"name":"address","nodeType":"ElementaryTypeName","src":"285:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"277:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":532,"name":"uint256","nodeType":"ElementaryTypeName","src":"296:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":540,"mutability":"mutable","name":"_approve","nameLocation":"369:8:4","nodeType":"VariableDeclaration","scope":714,"src":"321:56:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":539,"keyType":{"id":535,"name":"address","nodeType":"ElementaryTypeName","src":"329:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"321:47:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":538,"keyType":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"348:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"340:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":537,"name":"uint256","nodeType":"ElementaryTypeName","src":"359:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"},{"body":{"id":554,"nodeType":"Block","src":"396:72:4","statements":[{"expression":{"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":543,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"406:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":546,"indexExpression":{"expression":{"id":544,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"416:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"420:6:4","memberName":"sender","nodeType":"MemberAccess","src":"416:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"406:21:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3130303030","id":547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"428:5:4","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"406:27:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":549,"nodeType":"ExpressionStatement","src":"406:27:4"},{"expression":{"id":552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":550,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"443:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3130303030","id":551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"456:5:4","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"443:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":553,"nodeType":"ExpressionStatement","src":"443:18:4"}]},"id":555,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":541,"nodeType":"ParameterList","parameters":[],"src":"394:2:4"},"returnParameters":{"id":542,"nodeType":"ParameterList","parameters":[],"src":"396:0:4"},"scope":714,"src":"383:85:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[29],"body":{"id":562,"nodeType":"Block","src":"528:36:4","statements":[{"expression":{"id":560,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"545:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":559,"id":561,"nodeType":"Return","src":"538:19:4"}]},"functionSelector":"18160ddd","id":563,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"483:11:4","nodeType":"FunctionDefinition","parameters":{"id":556,"nodeType":"ParameterList","parameters":[],"src":"494:2:4"},"returnParameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":563,"src":"520:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":557,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"519:9:4"},"scope":714,"src":"474:90:4","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[37],"body":{"id":574,"nodeType":"Block","src":"654:47:4","statements":[{"expression":{"baseExpression":{"id":570,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"671:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":572,"indexExpression":{"id":571,"name":"your_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"681:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"671:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":569,"id":573,"nodeType":"Return","src":"664:30:4"}]},"functionSelector":"70a08231","id":575,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"583:9:4","nodeType":"FunctionDefinition","parameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"your_address","nameLocation":"601:12:4","nodeType":"VariableDeclaration","scope":575,"src":"593:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":564,"name":"address","nodeType":"ElementaryTypeName","src":"593:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"592:22:4"},"returnParameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"balance","nameLocation":"646:7:4","nodeType":"VariableDeclaration","scope":575,"src":"638:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":567,"name":"uint256","nodeType":"ElementaryTypeName","src":"638:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"637:17:4"},"scope":714,"src":"574:127:4","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":616,"nodeType":"Block","src":"799:175:4","statements":[{"expression":{"id":595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":586,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"809:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":588,"indexExpression":{"id":587,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"819:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"809:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":593,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"847:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":589,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"827:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":591,"indexExpression":{"id":590,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"837:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"827:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"843:3:4","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":271,"src":"827:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"827:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"809:45:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":596,"nodeType":"ExpressionStatement","src":"809:45:4"},{"expression":{"id":606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":597,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"864:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":599,"indexExpression":{"id":598,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"874:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"864:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":604,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"898:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":600,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"880:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":602,"indexExpression":{"id":601,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"890:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"880:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"894:3:4","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":256,"src":"880:17:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"880:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"864:41:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":607,"nodeType":"ExpressionStatement","src":"864:41:4"},{"eventCall":{"arguments":[{"id":609,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"929:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":610,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"935:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":611,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"939:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":608,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"920:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"920:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":613,"nodeType":"EmitStatement","src":"915:31:4"},{"expression":{"hexValue":"74727565","id":614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"963:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":585,"id":615,"nodeType":"Return","src":"956:11:4"}]},"id":617,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"716:9:4","nodeType":"FunctionDefinition","parameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":577,"mutability":"mutable","name":"from","nameLocation":"734:4:4","nodeType":"VariableDeclaration","scope":617,"src":"726:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":576,"name":"address","nodeType":"ElementaryTypeName","src":"726:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":579,"mutability":"mutable","name":"to","nameLocation":"748:2:4","nodeType":"VariableDeclaration","scope":617,"src":"740:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":578,"name":"address","nodeType":"ElementaryTypeName","src":"740:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":581,"mutability":"mutable","name":"amount","nameLocation":"760:6:4","nodeType":"VariableDeclaration","scope":617,"src":"752:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":580,"name":"uint256","nodeType":"ElementaryTypeName","src":"752:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"725:42:4"},"returnParameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":584,"mutability":"mutable","name":"success","nameLocation":"791:7:4","nodeType":"VariableDeclaration","scope":617,"src":"786:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":583,"name":"bool","nodeType":"ElementaryTypeName","src":"786:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"785:14:4"},"scope":714,"src":"707:267:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[47],"body":{"id":633,"nodeType":"Block","src":"1060:57:4","statements":[{"expression":{"arguments":[{"expression":{"id":627,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1087:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1091:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1087:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":629,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"1099:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":630,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"1103:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":626,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"1077:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) returns (bool)"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1077:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":625,"id":632,"nodeType":"Return","src":"1070:40:4"}]},"functionSelector":"a9059cbb","id":634,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"992:8:4","nodeType":"FunctionDefinition","parameters":{"id":622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":619,"mutability":"mutable","name":"to","nameLocation":"1009:2:4","nodeType":"VariableDeclaration","scope":634,"src":"1001:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":618,"name":"address","nodeType":"ElementaryTypeName","src":"1001:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":621,"mutability":"mutable","name":"amount","nameLocation":"1021:6:4","nodeType":"VariableDeclaration","scope":634,"src":"1013:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":620,"name":"uint256","nodeType":"ElementaryTypeName","src":"1013:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1000:28:4"},"returnParameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":624,"mutability":"mutable","name":"success","nameLocation":"1052:7:4","nodeType":"VariableDeclaration","scope":634,"src":"1047:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":623,"name":"bool","nodeType":"ElementaryTypeName","src":"1047:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1046:14:4"},"scope":714,"src":"983:134:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[57],"body":{"id":649,"nodeType":"Block","src":"1239:64:4","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":643,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"1256:8:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":645,"indexExpression":{"id":644,"name":"allow_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"1265:13:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1256:23:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":647,"indexExpression":{"id":646,"name":"approve_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"1280:15:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1256:40:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":642,"id":648,"nodeType":"Return","src":"1249:47:4"}]},"functionSelector":"dd62ed3e","id":650,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1136:9:4","nodeType":"FunctionDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":636,"mutability":"mutable","name":"allow_address","nameLocation":"1154:13:4","nodeType":"VariableDeclaration","scope":650,"src":"1146:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":635,"name":"address","nodeType":"ElementaryTypeName","src":"1146:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"approve_address","nameLocation":"1177:15:4","nodeType":"VariableDeclaration","scope":650,"src":"1169:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"1169:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1145:48:4"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":641,"mutability":"mutable","name":"remain_amount","nameLocation":"1225:13:4","nodeType":"VariableDeclaration","scope":650,"src":"1217:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":640,"name":"uint256","nodeType":"ElementaryTypeName","src":"1217:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1216:23:4"},"scope":714,"src":"1127:176:4","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[67],"body":{"id":677,"nodeType":"Block","src":"1400:144:4","statements":[{"expression":{"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":659,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"1410:8:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":663,"indexExpression":{"expression":{"id":660,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1419:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1423:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1419:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1410:20:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":664,"indexExpression":{"id":662,"name":"approve_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"1431:15:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1410:37:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":665,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"1450:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1410:46:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":667,"nodeType":"ExpressionStatement","src":"1410:46:4"},{"eventCall":{"arguments":[{"expression":{"id":669,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1480:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1484:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1480:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":671,"name":"approve_address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"1492:15:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":672,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"1509:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":668,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"1471:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1471:45:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":674,"nodeType":"EmitStatement","src":"1466:50:4"},{"expression":{"hexValue":"74727565","id":675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1533:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":658,"id":676,"nodeType":"Return","src":"1526:11:4"}]},"functionSelector":"095ea7b3","id":678,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1320:7:4","nodeType":"FunctionDefinition","parameters":{"id":655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"approve_address","nameLocation":"1336:15:4","nodeType":"VariableDeclaration","scope":678,"src":"1328:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":651,"name":"address","nodeType":"ElementaryTypeName","src":"1328:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":654,"mutability":"mutable","name":"amount","nameLocation":"1361:6:4","nodeType":"VariableDeclaration","scope":678,"src":"1353:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":653,"name":"uint256","nodeType":"ElementaryTypeName","src":"1353:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1327:41:4"},"returnParameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":657,"mutability":"mutable","name":"success","nameLocation":"1392:7:4","nodeType":"VariableDeclaration","scope":678,"src":"1387:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":656,"name":"bool","nodeType":"ElementaryTypeName","src":"1387:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1386:14:4"},"scope":714,"src":"1311:233:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[79],"body":{"id":712,"nodeType":"Block","src":"1645:128:4","statements":[{"expression":{"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":689,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"1655:8:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":693,"indexExpression":{"id":690,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"1664:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1655:14:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":694,"indexExpression":{"expression":{"id":691,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1670:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1674:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1670:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1655:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":702,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"1715:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"baseExpression":{"id":695,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"1684:8:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":697,"indexExpression":{"id":696,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"1693:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1684:14:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":700,"indexExpression":{"expression":{"id":698,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1699:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1703:6:4","memberName":"sender","nodeType":"MemberAccess","src":"1699:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1684:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1711:3:4","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":271,"src":"1684:30:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1684:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1655:67:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":705,"nodeType":"ExpressionStatement","src":"1655:67:4"},{"expression":{"arguments":[{"id":707,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"1749:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":708,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"1755:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":709,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"1759:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":706,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"1739:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) returns (bool)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1739:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":688,"id":711,"nodeType":"Return","src":"1732:34:4"}]},"functionSelector":"23b872dd","id":713,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1559:12:4","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":680,"mutability":"mutable","name":"from","nameLocation":"1580:4:4","nodeType":"VariableDeclaration","scope":713,"src":"1572:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":679,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":682,"mutability":"mutable","name":"to","nameLocation":"1594:2:4","nodeType":"VariableDeclaration","scope":713,"src":"1586:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":681,"name":"address","nodeType":"ElementaryTypeName","src":"1586:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"amount","nameLocation":"1606:6:4","nodeType":"VariableDeclaration","scope":713,"src":"1598:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":683,"name":"uint256","nodeType":"ElementaryTypeName","src":"1598:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1571:42:4"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"success","nameLocation":"1637:7:4","nodeType":"VariableDeclaration","scope":713,"src":"1632:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":686,"name":"bool","nodeType":"ElementaryTypeName","src":"1632:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1631:14:4"},"scope":714,"src":"1550:223:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":715,"src":"176:1599:4","usedErrors":[]}],"src":"36:1739:4"},"id":4}},"contracts":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220956b8d468829ae729708b4281e9f3b793d790f25df5e4822c6eb2a8f5c6be3e464736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 PUSH12 0x8D468829AE729708B4281E9F EXTCODESIZE PUSH26 0x3D790F25DF5E4822C6EB2A8F5C6BE3E464736F6C634300081100 CALLER ","sourceMap":"482:6300:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;482:6300:2;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220956b8d468829ae729708b4281e9f3b793d790f25df5e4822c6eb2a8f5c6be3e464736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 PUSH12 0x8D468829AE729708B4281E9F EXTCODESIZE PUSH26 0x3D790F25DF5E4822C6EB2A8F5C6BE3E464736F6C634300081100 CALLER ","sourceMap":"482:6300:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BankContract.sol":{"BankContract":{"abi":[{"inputs":[{"internalType":"address","name":"token_address","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token_address","type":"address"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token_address","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610522806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806347e7ef2414610046578063f3fef3a31461005b578063f8b2cb4f1461006e575b600080fd5b61005961005436600461043c565b6100b4565b005b61005961006936600461043c565b610259565b6100a261007c366004610466565b336000908152602081815260408083206001600160a01b03949094168352929052205490565b60405190815260200160405180910390f35b600081116101145760405162461bcd60e51b815260206004820152602260248201527f4465706f73697420616d6f756e74206d7573742067726561746572207468616e604482015261020360f41b60648201526084015b60405180910390fd5b6001600160a01b03821661016a5760405162461bcd60e51b815260206004820152601a60248201527f43616e27742073656e6420746f6b656e20746f20307830302e2e000000000000604482015260640161010b565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064016020604051808303816000875af11580156101bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e19190610488565b61021f5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161010b565b336000908152602081815260408083206001600160a01b0386168452909152812080548392906102509084906104c0565b90915550505050565b600081116102b55760405162461bcd60e51b815260206004820152602360248201527f576974686472617720616d6f756e74206d75737420677265617465722074686160448201526206e20360ec1b606482015260840161010b565b336000908152602081815260408083206001600160a01b03861684529091529020548111156103375760405162461bcd60e51b815260206004820152602860248201527f596f7520646f6e2774206861766520656e6f75676820616d6f756e7420746f20604482015267776974686472617760c01b606482015260840161010b565b336000908152602081815260408083206001600160a01b0386168452909152812080548392906103689084906104d9565b909155505060405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af11580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190610488565b61041c5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161010b565b5050565b80356001600160a01b038116811461043757600080fd5b919050565b6000806040838503121561044f57600080fd5b61045883610420565b946020939093013593505050565b60006020828403121561047857600080fd5b61048182610420565b9392505050565b60006020828403121561049a57600080fd5b8151801515811461048157600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156104d3576104d36104aa565b92915050565b818103818111156104d3576104d36104aa56fea2646970667358221220ef4c8f2b7a24d588f7b7509a92c7a79a5d26807243c4f02b6a69b07bf924ae0164736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x522 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x47E7EF24 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x43C JUMP JUMPDEST PUSH2 0xB4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x43C JUMP JUMPDEST PUSH2 0x259 JUMP JUMPDEST PUSH2 0xA2 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0x466 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x114 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4465706F73697420616D6F756E74206D7573742067726561746572207468616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x203 PUSH1 0xF4 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x16A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E27742073656E6420746F6B656E20746F20307830302E2E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x10B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E1 SWAP2 SWAP1 PUSH2 0x488 JUMP JUMPDEST PUSH2 0x21F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x10B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x250 SWAP1 DUP5 SWAP1 PUSH2 0x4C0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x2B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x576974686472617720616D6F756E74206D757374206772656174657220746861 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x6E203 PUSH1 0xEC SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x10B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x337 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646F6E2774206861766520656E6F75676820616D6F756E7420746F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x7769746864726177 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x10B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x368 SWAP1 DUP5 SWAP1 PUSH2 0x4D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0x488 JUMP JUMPDEST PUSH2 0x41C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x10B JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x458 DUP4 PUSH2 0x420 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x481 DUP3 PUSH2 0x420 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4D3 JUMPI PUSH2 0x4D3 PUSH2 0x4AA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4D3 JUMPI PUSH2 0x4D3 PUSH2 0x4AA JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0x4C DUP16 0x2B PUSH27 0x24D588F7B7509A92C7A79A5D26807243C4F02B6A69B07BF924AE01 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"176:1056:3:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@deposit_455":{"entryPoint":180,"id":455,"parameterSlots":2,"returnSlots":0},"@getBalance_518":{"entryPoint":null,"id":518,"parameterSlots":1,"returnSlots":1},"@withdraw_503":{"entryPoint":601,"id":503,"parameterSlots":2,"returnSlots":0},"abi_decode_address":{"entryPoint":1056,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1126,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":1084,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":1160,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3c6685f9bbc8eb3988afc169611a07713bcdb12bc76fe4b7c0816f2d975a24d7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7bfde2de66abc740731f51ba5d38492ad35cc8221fc085fe24a7253addb210ac__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8620eadac7563a75825f41256ba289ad9cd1aaf877a23cf55191c4122e1955eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b9c11d7a792a26904d2900b63d4521bd7139384d48ae9cf3eaaa3eaf6fb5a795__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":1216,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":1241,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":1194,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4072:5","statements":[{"nodeType":"YulBlock","src":"6:3:5","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:5","statements":[{"nodeType":"YulAssignment","src":"73:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:5"},"nodeType":"YulFunctionCall","src":"82:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:5"}]},{"body":{"nodeType":"YulBlock","src":"165:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:5"},"nodeType":"YulFunctionCall","src":"167:12:5"},"nodeType":"YulExpressionStatement","src":"167:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:5","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:5","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:5"},"nodeType":"YulFunctionCall","src":"146:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:5"},"nodeType":"YulFunctionCall","src":"142:19:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:5"},"nodeType":"YulFunctionCall","src":"131:31:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:5"},"nodeType":"YulFunctionCall","src":"121:42:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:5"},"nodeType":"YulFunctionCall","src":"114:50:5"},"nodeType":"YulIf","src":"111:70:5"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:5","type":""}],"src":"14:173:5"},{"body":{"nodeType":"YulBlock","src":"279:167:5","statements":[{"body":{"nodeType":"YulBlock","src":"325:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"337:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"327:6:5"},"nodeType":"YulFunctionCall","src":"327:12:5"},"nodeType":"YulExpressionStatement","src":"327:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"300:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"309:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"296:3:5"},"nodeType":"YulFunctionCall","src":"296:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"321:2:5","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"292:3:5"},"nodeType":"YulFunctionCall","src":"292:32:5"},"nodeType":"YulIf","src":"289:52:5"},{"nodeType":"YulAssignment","src":"350:39:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"379:9:5"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"360:18:5"},"nodeType":"YulFunctionCall","src":"360:29:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"350:6:5"}]},{"nodeType":"YulAssignment","src":"398:42:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"436:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"421:3:5"},"nodeType":"YulFunctionCall","src":"421:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"408:12:5"},"nodeType":"YulFunctionCall","src":"408:32:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"398:6:5"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"237:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"248:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"260:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"268:6:5","type":""}],"src":"192:254:5"},{"body":{"nodeType":"YulBlock","src":"521:116:5","statements":[{"body":{"nodeType":"YulBlock","src":"567:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"576:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"579:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"569:6:5"},"nodeType":"YulFunctionCall","src":"569:12:5"},"nodeType":"YulExpressionStatement","src":"569:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"542:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"551:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"538:3:5"},"nodeType":"YulFunctionCall","src":"538:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"563:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"534:3:5"},"nodeType":"YulFunctionCall","src":"534:32:5"},"nodeType":"YulIf","src":"531:52:5"},{"nodeType":"YulAssignment","src":"592:39:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"621:9:5"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"602:18:5"},"nodeType":"YulFunctionCall","src":"602:29:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"592:6:5"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"487:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"498:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"510:6:5","type":""}],"src":"451:186:5"},{"body":{"nodeType":"YulBlock","src":"743:76:5","statements":[{"nodeType":"YulAssignment","src":"753:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"765:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"776:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"761:3:5"},"nodeType":"YulFunctionCall","src":"761:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"753:4:5"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"795:9:5"},{"name":"value0","nodeType":"YulIdentifier","src":"806:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"788:6:5"},"nodeType":"YulFunctionCall","src":"788:25:5"},"nodeType":"YulExpressionStatement","src":"788:25:5"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"712:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"723:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"734:4:5","type":""}],"src":"642:177:5"},{"body":{"nodeType":"YulBlock","src":"998:224:5","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1015:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1026:2:5","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1008:6:5"},"nodeType":"YulFunctionCall","src":"1008:21:5"},"nodeType":"YulExpressionStatement","src":"1008:21:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1049:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1060:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1045:3:5"},"nodeType":"YulFunctionCall","src":"1045:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"1065:2:5","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1038:6:5"},"nodeType":"YulFunctionCall","src":"1038:30:5"},"nodeType":"YulExpressionStatement","src":"1038:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1088:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1099:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1084:3:5"},"nodeType":"YulFunctionCall","src":"1084:18:5"},{"hexValue":"4465706f73697420616d6f756e74206d7573742067726561746572207468616e","kind":"string","nodeType":"YulLiteral","src":"1104:34:5","type":"","value":"Deposit amount must greater than"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1077:6:5"},"nodeType":"YulFunctionCall","src":"1077:62:5"},"nodeType":"YulExpressionStatement","src":"1077:62:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1159:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1170:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1155:3:5"},"nodeType":"YulFunctionCall","src":"1155:18:5"},{"hexValue":"2030","kind":"string","nodeType":"YulLiteral","src":"1175:4:5","type":"","value":" 0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1148:6:5"},"nodeType":"YulFunctionCall","src":"1148:32:5"},"nodeType":"YulExpressionStatement","src":"1148:32:5"},{"nodeType":"YulAssignment","src":"1189:27:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1201:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1212:3:5","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1197:3:5"},"nodeType":"YulFunctionCall","src":"1197:19:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1189:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_8620eadac7563a75825f41256ba289ad9cd1aaf877a23cf55191c4122e1955eb__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"975:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"989:4:5","type":""}],"src":"824:398:5"},{"body":{"nodeType":"YulBlock","src":"1401:176:5","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1418:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1429:2:5","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1411:6:5"},"nodeType":"YulFunctionCall","src":"1411:21:5"},"nodeType":"YulExpressionStatement","src":"1411:21:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1452:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1463:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1448:3:5"},"nodeType":"YulFunctionCall","src":"1448:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"1468:2:5","type":"","value":"26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1441:6:5"},"nodeType":"YulFunctionCall","src":"1441:30:5"},"nodeType":"YulExpressionStatement","src":"1441:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1502:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:5"},"nodeType":"YulFunctionCall","src":"1487:18:5"},{"hexValue":"43616e27742073656e6420746f6b656e20746f20307830302e2e","kind":"string","nodeType":"YulLiteral","src":"1507:28:5","type":"","value":"Can't send token to 0x00.."}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1480:6:5"},"nodeType":"YulFunctionCall","src":"1480:56:5"},"nodeType":"YulExpressionStatement","src":"1480:56:5"},{"nodeType":"YulAssignment","src":"1545:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1557:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1568:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1553:3:5"},"nodeType":"YulFunctionCall","src":"1553:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1545:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_7bfde2de66abc740731f51ba5d38492ad35cc8221fc085fe24a7253addb210ac__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1378:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1392:4:5","type":""}],"src":"1227:350:5"},{"body":{"nodeType":"YulBlock","src":"1739:218:5","statements":[{"nodeType":"YulAssignment","src":"1749:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1761:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1772:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1757:3:5"},"nodeType":"YulFunctionCall","src":"1757:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1749:4:5"}]},{"nodeType":"YulVariableDeclaration","src":"1784:29:5","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1802:3:5","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1807:1:5","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1798:3:5"},"nodeType":"YulFunctionCall","src":"1798:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"1811:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1794:3:5"},"nodeType":"YulFunctionCall","src":"1794:19:5"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1788:2:5","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1829:9:5"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1844:6:5"},{"name":"_1","nodeType":"YulIdentifier","src":"1852:2:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1840:3:5"},"nodeType":"YulFunctionCall","src":"1840:15:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1822:6:5"},"nodeType":"YulFunctionCall","src":"1822:34:5"},"nodeType":"YulExpressionStatement","src":"1822:34:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1876:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1887:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1872:3:5"},"nodeType":"YulFunctionCall","src":"1872:18:5"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1896:6:5"},{"name":"_1","nodeType":"YulIdentifier","src":"1904:2:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1892:3:5"},"nodeType":"YulFunctionCall","src":"1892:15:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1865:6:5"},"nodeType":"YulFunctionCall","src":"1865:43:5"},"nodeType":"YulExpressionStatement","src":"1865:43:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1928:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1939:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1924:3:5"},"nodeType":"YulFunctionCall","src":"1924:18:5"},{"name":"value2","nodeType":"YulIdentifier","src":"1944:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1917:6:5"},"nodeType":"YulFunctionCall","src":"1917:34:5"},"nodeType":"YulExpressionStatement","src":"1917:34:5"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1692:9:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1703:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1711:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1719:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1730:4:5","type":""}],"src":"1582:375:5"},{"body":{"nodeType":"YulBlock","src":"2040:199:5","statements":[{"body":{"nodeType":"YulBlock","src":"2086:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2095:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2098:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2088:6:5"},"nodeType":"YulFunctionCall","src":"2088:12:5"},"nodeType":"YulExpressionStatement","src":"2088:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2061:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"2070:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2057:3:5"},"nodeType":"YulFunctionCall","src":"2057:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"2082:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2053:3:5"},"nodeType":"YulFunctionCall","src":"2053:32:5"},"nodeType":"YulIf","src":"2050:52:5"},{"nodeType":"YulVariableDeclaration","src":"2111:29:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2130:9:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2124:5:5"},"nodeType":"YulFunctionCall","src":"2124:16:5"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2115:5:5","type":""}]},{"body":{"nodeType":"YulBlock","src":"2193:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2202:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2205:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2195:6:5"},"nodeType":"YulFunctionCall","src":"2195:12:5"},"nodeType":"YulExpressionStatement","src":"2195:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2162:5:5"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2183:5:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2176:6:5"},"nodeType":"YulFunctionCall","src":"2176:13:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2169:6:5"},"nodeType":"YulFunctionCall","src":"2169:21:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2159:2:5"},"nodeType":"YulFunctionCall","src":"2159:32:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2152:6:5"},"nodeType":"YulFunctionCall","src":"2152:40:5"},"nodeType":"YulIf","src":"2149:60:5"},{"nodeType":"YulAssignment","src":"2218:15:5","value":{"name":"value","nodeType":"YulIdentifier","src":"2228:5:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2218:6:5"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2006:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2017:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2029:6:5","type":""}],"src":"1962:277:5"},{"body":{"nodeType":"YulBlock","src":"2418:165:5","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2435:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2446:2:5","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2428:6:5"},"nodeType":"YulFunctionCall","src":"2428:21:5"},"nodeType":"YulExpressionStatement","src":"2428:21:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2469:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2480:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2465:3:5"},"nodeType":"YulFunctionCall","src":"2465:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"2485:2:5","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2458:6:5"},"nodeType":"YulFunctionCall","src":"2458:30:5"},"nodeType":"YulExpressionStatement","src":"2458:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2508:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2519:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2504:3:5"},"nodeType":"YulFunctionCall","src":"2504:18:5"},{"hexValue":"5472616e73666572206661696c6564","kind":"string","nodeType":"YulLiteral","src":"2524:17:5","type":"","value":"Transfer failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2497:6:5"},"nodeType":"YulFunctionCall","src":"2497:45:5"},"nodeType":"YulExpressionStatement","src":"2497:45:5"},{"nodeType":"YulAssignment","src":"2551:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2563:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"2574:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2559:3:5"},"nodeType":"YulFunctionCall","src":"2559:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2551:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2395:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2409:4:5","type":""}],"src":"2244:339:5"},{"body":{"nodeType":"YulBlock","src":"2620:95:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2637:1:5","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2644:3:5","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2649:10:5","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2640:3:5"},"nodeType":"YulFunctionCall","src":"2640:20:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2630:6:5"},"nodeType":"YulFunctionCall","src":"2630:31:5"},"nodeType":"YulExpressionStatement","src":"2630:31:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2677:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2680:4:5","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2670:6:5"},"nodeType":"YulFunctionCall","src":"2670:15:5"},"nodeType":"YulExpressionStatement","src":"2670:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2701:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2704:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2694:6:5"},"nodeType":"YulFunctionCall","src":"2694:15:5"},"nodeType":"YulExpressionStatement","src":"2694:15:5"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"2588:127:5"},{"body":{"nodeType":"YulBlock","src":"2768:77:5","statements":[{"nodeType":"YulAssignment","src":"2778:16:5","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2789:1:5"},{"name":"y","nodeType":"YulIdentifier","src":"2792:1:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2785:3:5"},"nodeType":"YulFunctionCall","src":"2785:9:5"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"2778:3:5"}]},{"body":{"nodeType":"YulBlock","src":"2817:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2819:16:5"},"nodeType":"YulFunctionCall","src":"2819:18:5"},"nodeType":"YulExpressionStatement","src":"2819:18:5"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2809:1:5"},{"name":"sum","nodeType":"YulIdentifier","src":"2812:3:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2806:2:5"},"nodeType":"YulFunctionCall","src":"2806:10:5"},"nodeType":"YulIf","src":"2803:36:5"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2751:1:5","type":""},{"name":"y","nodeType":"YulTypedName","src":"2754:1:5","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"2760:3:5","type":""}],"src":"2720:125:5"},{"body":{"nodeType":"YulBlock","src":"3024:225:5","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3041:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3052:2:5","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3034:6:5"},"nodeType":"YulFunctionCall","src":"3034:21:5"},"nodeType":"YulExpressionStatement","src":"3034:21:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3075:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3086:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3071:3:5"},"nodeType":"YulFunctionCall","src":"3071:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"3091:2:5","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3064:6:5"},"nodeType":"YulFunctionCall","src":"3064:30:5"},"nodeType":"YulExpressionStatement","src":"3064:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3114:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3125:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3110:3:5"},"nodeType":"YulFunctionCall","src":"3110:18:5"},{"hexValue":"576974686472617720616d6f756e74206d757374206772656174657220746861","kind":"string","nodeType":"YulLiteral","src":"3130:34:5","type":"","value":"Withdraw amount must greater tha"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3103:6:5"},"nodeType":"YulFunctionCall","src":"3103:62:5"},"nodeType":"YulExpressionStatement","src":"3103:62:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3185:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3196:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3181:3:5"},"nodeType":"YulFunctionCall","src":"3181:18:5"},{"hexValue":"6e2030","kind":"string","nodeType":"YulLiteral","src":"3201:5:5","type":"","value":"n 0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3174:6:5"},"nodeType":"YulFunctionCall","src":"3174:33:5"},"nodeType":"YulExpressionStatement","src":"3174:33:5"},{"nodeType":"YulAssignment","src":"3216:27:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3228:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3239:3:5","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3224:3:5"},"nodeType":"YulFunctionCall","src":"3224:19:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3216:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_b9c11d7a792a26904d2900b63d4521bd7139384d48ae9cf3eaaa3eaf6fb5a795__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3001:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3015:4:5","type":""}],"src":"2850:399:5"},{"body":{"nodeType":"YulBlock","src":"3428:230:5","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3445:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3456:2:5","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3438:6:5"},"nodeType":"YulFunctionCall","src":"3438:21:5"},"nodeType":"YulExpressionStatement","src":"3438:21:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3479:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3490:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3475:3:5"},"nodeType":"YulFunctionCall","src":"3475:18:5"},{"kind":"number","nodeType":"YulLiteral","src":"3495:2:5","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3468:6:5"},"nodeType":"YulFunctionCall","src":"3468:30:5"},"nodeType":"YulExpressionStatement","src":"3468:30:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3518:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3529:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3514:3:5"},"nodeType":"YulFunctionCall","src":"3514:18:5"},{"hexValue":"596f7520646f6e2774206861766520656e6f75676820616d6f756e7420746f20","kind":"string","nodeType":"YulLiteral","src":"3534:34:5","type":"","value":"You don't have enough amount to "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3507:6:5"},"nodeType":"YulFunctionCall","src":"3507:62:5"},"nodeType":"YulExpressionStatement","src":"3507:62:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3589:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3600:2:5","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3585:3:5"},"nodeType":"YulFunctionCall","src":"3585:18:5"},{"hexValue":"7769746864726177","kind":"string","nodeType":"YulLiteral","src":"3605:10:5","type":"","value":"withdraw"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3578:6:5"},"nodeType":"YulFunctionCall","src":"3578:38:5"},"nodeType":"YulExpressionStatement","src":"3578:38:5"},{"nodeType":"YulAssignment","src":"3625:27:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3637:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3648:3:5","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3633:3:5"},"nodeType":"YulFunctionCall","src":"3633:19:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3625:4:5"}]}]},"name":"abi_encode_tuple_t_stringliteral_3c6685f9bbc8eb3988afc169611a07713bcdb12bc76fe4b7c0816f2d975a24d7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3405:9:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3419:4:5","type":""}],"src":"3254:404:5"},{"body":{"nodeType":"YulBlock","src":"3712:79:5","statements":[{"nodeType":"YulAssignment","src":"3722:17:5","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3734:1:5"},{"name":"y","nodeType":"YulIdentifier","src":"3737:1:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3730:3:5"},"nodeType":"YulFunctionCall","src":"3730:9:5"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"3722:4:5"}]},{"body":{"nodeType":"YulBlock","src":"3763:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3765:16:5"},"nodeType":"YulFunctionCall","src":"3765:18:5"},"nodeType":"YulExpressionStatement","src":"3765:18:5"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"3754:4:5"},{"name":"x","nodeType":"YulIdentifier","src":"3760:1:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3751:2:5"},"nodeType":"YulFunctionCall","src":"3751:11:5"},"nodeType":"YulIf","src":"3748:37:5"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3694:1:5","type":""},{"name":"y","nodeType":"YulTypedName","src":"3697:1:5","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"3703:4:5","type":""}],"src":"3663:128:5"},{"body":{"nodeType":"YulBlock","src":"3925:145:5","statements":[{"nodeType":"YulAssignment","src":"3935:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3947:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"3958:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3943:3:5"},"nodeType":"YulFunctionCall","src":"3943:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3935:4:5"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3977:9:5"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3992:6:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4008:3:5","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4013:1:5","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4004:3:5"},"nodeType":"YulFunctionCall","src":"4004:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"4017:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4000:3:5"},"nodeType":"YulFunctionCall","src":"4000:19:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3988:3:5"},"nodeType":"YulFunctionCall","src":"3988:32:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3970:6:5"},"nodeType":"YulFunctionCall","src":"3970:51:5"},"nodeType":"YulExpressionStatement","src":"3970:51:5"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4041:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"4052:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4037:3:5"},"nodeType":"YulFunctionCall","src":"4037:18:5"},{"name":"value1","nodeType":"YulIdentifier","src":"4057:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4030:6:5"},"nodeType":"YulFunctionCall","src":"4030:34:5"},"nodeType":"YulExpressionStatement","src":"4030:34:5"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3886:9:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3897:6:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3905:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3916:4:5","type":""}],"src":"3796:274:5"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_8620eadac7563a75825f41256ba289ad9cd1aaf877a23cf55191c4122e1955eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Deposit amount must greater than\")\n        mstore(add(headStart, 96), \" 0\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7bfde2de66abc740731f51ba5d38492ad35cc8221fc085fe24a7253addb210ac__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Can't send token to 0x00..\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_b9c11d7a792a26904d2900b63d4521bd7139384d48ae9cf3eaaa3eaf6fb5a795__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Withdraw amount must greater tha\")\n        mstore(add(headStart, 96), \"n 0\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3c6685f9bbc8eb3988afc169611a07713bcdb12bc76fe4b7c0816f2d975a24d7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"You don't have enough amount to \")\n        mstore(add(headStart, 96), \"withdraw\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":5,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806347e7ef2414610046578063f3fef3a31461005b578063f8b2cb4f1461006e575b600080fd5b61005961005436600461043c565b6100b4565b005b61005961006936600461043c565b610259565b6100a261007c366004610466565b336000908152602081815260408083206001600160a01b03949094168352929052205490565b60405190815260200160405180910390f35b600081116101145760405162461bcd60e51b815260206004820152602260248201527f4465706f73697420616d6f756e74206d7573742067726561746572207468616e604482015261020360f41b60648201526084015b60405180910390fd5b6001600160a01b03821661016a5760405162461bcd60e51b815260206004820152601a60248201527f43616e27742073656e6420746f6b656e20746f20307830302e2e000000000000604482015260640161010b565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064016020604051808303816000875af11580156101bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e19190610488565b61021f5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161010b565b336000908152602081815260408083206001600160a01b0386168452909152812080548392906102509084906104c0565b90915550505050565b600081116102b55760405162461bcd60e51b815260206004820152602360248201527f576974686472617720616d6f756e74206d75737420677265617465722074686160448201526206e20360ec1b606482015260840161010b565b336000908152602081815260408083206001600160a01b03861684529091529020548111156103375760405162461bcd60e51b815260206004820152602860248201527f596f7520646f6e2774206861766520656e6f75676820616d6f756e7420746f20604482015267776974686472617760c01b606482015260840161010b565b336000908152602081815260408083206001600160a01b0386168452909152812080548392906103689084906104d9565b909155505060405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af11580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190610488565b61041c5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161010b565b5050565b80356001600160a01b038116811461043757600080fd5b919050565b6000806040838503121561044f57600080fd5b61045883610420565b946020939093013593505050565b60006020828403121561047857600080fd5b61048182610420565b9392505050565b60006020828403121561049a57600080fd5b8151801515811461048157600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156104d3576104d36104aa565b92915050565b818103818111156104d3576104d36104aa56fea2646970667358221220ef4c8f2b7a24d588f7b7509a92c7a79a5d26807243c4f02b6a69b07bf924ae0164736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x47E7EF24 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xF8B2CB4F EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x43C JUMP JUMPDEST PUSH2 0xB4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x43C JUMP JUMPDEST PUSH2 0x259 JUMP JUMPDEST PUSH2 0xA2 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0x466 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x114 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4465706F73697420616D6F756E74206D7573742067726561746572207468616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x203 PUSH1 0xF4 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x16A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E27742073656E6420746F6B656E20746F20307830302E2E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x10B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E1 SWAP2 SWAP1 PUSH2 0x488 JUMP JUMPDEST PUSH2 0x21F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x10B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x250 SWAP1 DUP5 SWAP1 PUSH2 0x4C0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x2B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x576974686472617720616D6F756E74206D757374206772656174657220746861 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x6E203 PUSH1 0xEC SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x10B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x337 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520646F6E2774206861766520656E6F75676820616D6F756E7420746F20 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x7769746864726177 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x10B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x368 SWAP1 DUP5 SWAP1 PUSH2 0x4D9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3BA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0x488 JUMP JUMPDEST PUSH2 0x41C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x10B JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x458 DUP4 PUSH2 0x420 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x481 DUP3 PUSH2 0x420 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x49A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4D3 JUMPI PUSH2 0x4D3 PUSH2 0x4AA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4D3 JUMPI PUSH2 0x4D3 PUSH2 0x4AA JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF 0x4C DUP16 0x2B PUSH27 0x24D588F7B7509A92C7A79A5D26807243C4F02B6A69B07BF924AE01 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"176:1056:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;310:373;;;;;;:::i;:::-;;:::i;:::-;;693:389;;;;;;:::i;:::-;;:::i;1092:138::-;;;;;;:::i;:::-;1197:10;1155:15;1188:20;;;;;;;;;;;-1:-1:-1;;;;;1188:35:3;;;;;;;;;;;;1092:138;;;;788:25:5;;;776:2;761:18;1092:138:3;;;;;;;310:373;399:1;390:6;:10;382:57;;;;-1:-1:-1;;;382:57:3;;1026:2:5;382:57:3;;;1008:21:5;1065:2;1045:18;;;1038:30;1104:34;1084:18;;;1077:62;-1:-1:-1;;;1155:18:5;;;1148:32;1197:19;;382:57:3;;;;;;;;;-1:-1:-1;;;;;457:27:3;;449:66;;;;-1:-1:-1;;;449:66:3;;1429:2:5;449:66:3;;;1411:21:5;1468:2;1448:18;;;1441:30;1507:28;1487:18;;;1480:56;1553:18;;449:66:3;1227:350:5;449:66:3;533:68;;-1:-1:-1;;;533:68:3;;568:10;533:68;;;1822:34:5;587:4:3;1872:18:5;;;1865:43;1924:18;;;1917:34;;;-1:-1:-1;;;;;533:34:3;;;;;1757:18:5;;533:68:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;525:96;;;;-1:-1:-1;;;525:96:3;;2446:2:5;525:96:3;;;2428:21:5;2485:2;2465:18;;;2458:30;-1:-1:-1;;;2504:18:5;;;2497:45;2559:18;;525:96:3;2244:339:5;525:96:3;640:10;631:8;:20;;;;;;;;;;;-1:-1:-1;;;;;631:35:3;;;;;;;;;:45;;670:6;;631:8;:45;;670:6;;631:45;:::i;:::-;;;;-1:-1:-1;;;;310:373:3:o;693:389::-;783:1;774:6;:10;766:58;;;;-1:-1:-1;;;766:58:3;;3052:2:5;766:58:3;;;3034:21:5;3091:2;3071:18;;;3064:30;3130:34;3110:18;;;3103:62;-1:-1:-1;;;3181:18:5;;;3174:33;3224:19;;766:58:3;2850:399:5;766:58:3;851:10;842:8;:20;;;;;;;;;;;-1:-1:-1;;;;;842:35:3;;;;;;;;;;:45;-1:-1:-1;842:45:3;834:98;;;;-1:-1:-1;;;834:98:3;;3456:2:5;834:98:3;;;3438:21:5;3495:2;3475:18;;;3468:30;3534:34;3514:18;;;3507:62;-1:-1:-1;;;3585:18:5;;;3578:38;3633:19;;834:98:3;3254:404:5;834:98:3;951:10;942:8;:20;;;;;;;;;;;-1:-1:-1;;;;;942:35:3;;;;;;;;;:45;;981:6;;942:8;:45;;981:6;;942:45;:::i;:::-;;;;-1:-1:-1;;1005:50:3;;-1:-1:-1;;;1005:50:3;;1036:10;1005:50;;;3970:51:5;4037:18;;;4030:34;;;-1:-1:-1;;;;;1005:30:3;;;;;3943:18:5;;1005:50:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;997:78;;;;-1:-1:-1;;;997:78:3;;2446:2:5;997:78:3;;;2428:21:5;2485:2;2465:18;;;2458:30;-1:-1:-1;;;2504:18:5;;;2497:45;2559:18;;997:78:3;2244:339:5;997:78:3;693:389;;:::o;14:173:5:-;82:20;;-1:-1:-1;;;;;131:31:5;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:5:o;451:186::-;510:6;563:2;551:9;542:7;538:23;534:32;531:52;;;579:1;576;569:12;531:52;602:29;621:9;602:29;:::i;:::-;592:39;451:186;-1:-1:-1;;;451:186:5:o;1962:277::-;2029:6;2082:2;2070:9;2061:7;2057:23;2053:32;2050:52;;;2098:1;2095;2088:12;2050:52;2130:9;2124:16;2183:5;2176:13;2169:21;2162:5;2159:32;2149:60;;2205:1;2202;2195:12;2588:127;2649:10;2644:3;2640:20;2637:1;2630:31;2680:4;2677:1;2670:15;2704:4;2701:1;2694:15;2720:125;2785:9;;;2806:10;;;2803:36;;;2819:18;;:::i;:::-;2720:125;;;;:::o;3663:128::-;3730:9;;;3751:11;;;3748:37;;;3765:18;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"262800","executionCost":"306","totalCost":"263106"},"external":{"deposit(address,uint256)":"infinite","getBalance(address)":"2621","withdraw(address,uint256)":"infinite"}},"methodIdentifiers":{"deposit(address,uint256)":"47e7ef24","getBalance(address)":"f8b2cb4f","withdraw(address,uint256)":"f3fef3a3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BankContract.sol\":\"BankContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/BankContract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract BankContract{\\n    using SafeMath for uint256;\\n    mapping(address => mapping(address => uint256)) private balances;\\n    \\n    function deposit(address token_address, uint256 amount) public{\\n        require(amount > 0, \\\"Deposit amount must greater than 0\\\");\\n        require(token_address != address(0), \\\"Can't send token to 0x00..\\\");\\n        require(IERC20(token_address).transferFrom(msg.sender,address(this), amount), \\\"Transfer failed\\\");\\n        balances[msg.sender][token_address] += amount;\\n    }\\n    \\n    function withdraw(address token_address, uint256 amount) public{\\n        require(amount > 0, \\\"Withdraw amount must greater than 0\\\");\\n        require(balances[msg.sender][token_address] >= amount, \\\"You don't have enough amount to withdraw\\\");\\n        balances[msg.sender][token_address] -= amount;\\n        require(IERC20(token_address).transfer(msg.sender, amount), \\\"Transfer failed\\\");\\n    }\\n    \\n    function getBalance(address token_address) public view returns(uint256 balance){\\n        return balances[msg.sender][token_address];\\n    }\\n}\",\"keccak256\":\"0xd0760ef09aa2f778200f69e3f47c20ddee72af5bfb5071de0e5a8a21bf4990b8\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":405,"contract":"contracts/BankContract.sol:BankContract","label":"balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC20.sol":{"ERC20":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"allow_address","type":"address"},{"internalType":"address","name":"approve_address","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remain_amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"approve_address","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"your_address","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_555":{"entryPoint":null,"id":555,"parameterSlots":0,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50336000908152600160205260408120612710908190559055610421806100386000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063095ea7b31461006757806318160ddd1461008f57806323b872dd146100a157806370a08231146100b4578063a9059cbb146100dd578063dd62ed3e146100f0575b600080fd5b61007a6100753660046102fb565b610129565b60405190151581526020015b60405180910390f35b6000545b604051908152602001610086565b61007a6100af366004610325565b610196565b6100936100c2366004610361565b6001600160a01b031660009081526001602052604090205490565b61007a6100eb3660046102fb565b6101fb565b6100936100fe36600461037c565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b3360008181526002602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906101849086815260200190565b60405180910390a35060015b92915050565b6001600160a01b03831660009081526002602090815260408083203384529091528120546101c4908361020f565b6001600160a01b03851660009081526002602090815260408083203384529091529020556101f384848461021b565b949350505050565b600061020833848461021b565b9392505050565b600061020882846103c5565b6001600160a01b03831660009081526001602052604081205461023e908361020f565b6001600160a01b03808616600090815260016020526040808220939093559085168152205461026d90836102d3565b6001600160a01b0380851660008181526001602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906102c19086815260200190565b60405180910390a35060019392505050565b600061020882846103d8565b80356001600160a01b03811681146102f657600080fd5b919050565b6000806040838503121561030e57600080fd5b610317836102df565b946020939093013593505050565b60008060006060848603121561033a57600080fd5b610343846102df565b9250610351602085016102df565b9150604084013590509250925092565b60006020828403121561037357600080fd5b610208826102df565b6000806040838503121561038f57600080fd5b610398836102df565b91506103a6602084016102df565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610190576101906103af565b80820180821115610190576101906103af56fea2646970667358221220eb9aeebb2bea9a5ab2b9025645fefbde4dfd43eab989f27d2e857a5b9e57624a64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x2710 SWAP1 DUP2 SWAP1 SSTORE SWAP1 SSTORE PUSH2 0x421 DUP1 PUSH2 0x38 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x8F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0xF0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FB JUMP JUMPDEST PUSH2 0x129 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x86 JUMP JUMPDEST PUSH2 0x7A PUSH2 0xAF CALLDATASIZE PUSH1 0x4 PUSH2 0x325 JUMP JUMPDEST PUSH2 0x196 JUMP JUMPDEST PUSH2 0x93 PUSH2 0xC2 CALLDATASIZE PUSH1 0x4 PUSH2 0x361 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x7A PUSH2 0xEB CALLDATASIZE PUSH1 0x4 PUSH2 0x2FB JUMP JUMPDEST PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x93 PUSH2 0xFE CALLDATASIZE PUSH1 0x4 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE MLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x184 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x1C4 SWAP1 DUP4 PUSH2 0x20F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE PUSH2 0x1F3 DUP5 DUP5 DUP5 PUSH2 0x21B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208 CALLER DUP5 DUP5 PUSH2 0x21B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208 DUP3 DUP5 PUSH2 0x3C5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x23E SWAP1 DUP4 PUSH2 0x20F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x26D SWAP1 DUP4 PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP7 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x2C1 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208 DUP3 DUP5 PUSH2 0x3D8 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x317 DUP4 PUSH2 0x2DF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x33A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x343 DUP5 PUSH2 0x2DF JUMP JUMPDEST SWAP3 POP PUSH2 0x351 PUSH1 0x20 DUP6 ADD PUSH2 0x2DF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x208 DUP3 PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x398 DUP4 PUSH2 0x2DF JUMP JUMPDEST SWAP2 POP PUSH2 0x3A6 PUSH1 0x20 DUP5 ADD PUSH2 0x2DF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x190 JUMPI PUSH2 0x190 PUSH2 0x3AF JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x190 JUMPI PUSH2 0x190 PUSH2 0x3AF JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB SWAP11 0xEE 0xBB 0x2B 0xEA SWAP11 GAS 0xB2 0xB9 MUL JUMP GASLIMIT INVALID 0xFB 0xDE 0x4D REVERT NUMBER 0xEA 0xB9 DUP10 CALLCODE PUSH30 0x2E857A5B9E57624A64736F6C634300081100330000000000000000000000 ","sourceMap":"176:1599:4:-:0;;;383:85;;;;;;;;;-1:-1:-1;416:10:4;406:21;;;;:9;:21;;;;;428:5;406:27;;;;443:18;;176:1599;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transfer_617":{"entryPoint":539,"id":617,"parameterSlots":3,"returnSlots":1},"@add_256":{"entryPoint":723,"id":256,"parameterSlots":2,"returnSlots":1},"@allowance_650":{"entryPoint":null,"id":650,"parameterSlots":2,"returnSlots":1},"@approve_678":{"entryPoint":297,"id":678,"parameterSlots":2,"returnSlots":1},"@balanceOf_575":{"entryPoint":null,"id":575,"parameterSlots":1,"returnSlots":1},"@sub_271":{"entryPoint":527,"id":271,"parameterSlots":2,"returnSlots":1},"@totalSupply_563":{"entryPoint":null,"id":563,"parameterSlots":0,"returnSlots":1},"@transferFrom_713":{"entryPoint":406,"id":713,"parameterSlots":3,"returnSlots":1},"@transfer_634":{"entryPoint":507,"id":634,"parameterSlots":2,"returnSlots":1},"abi_decode_address":{"entryPoint":735,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":865,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":892,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":805,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":763,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":984,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":965,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":943,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2006:5","statements":[{"nodeType":"YulBlock","src":"6:3:5","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:5","statements":[{"nodeType":"YulAssignment","src":"73:29:5","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:5"},"nodeType":"YulFunctionCall","src":"82:20:5"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:5"}]},{"body":{"nodeType":"YulBlock","src":"165:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:5"},"nodeType":"YulFunctionCall","src":"167:12:5"},"nodeType":"YulExpressionStatement","src":"167:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:5"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:5","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:5","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:5"},"nodeType":"YulFunctionCall","src":"146:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:5","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:5"},"nodeType":"YulFunctionCall","src":"142:19:5"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:5"},"nodeType":"YulFunctionCall","src":"131:31:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:5"},"nodeType":"YulFunctionCall","src":"121:42:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:5"},"nodeType":"YulFunctionCall","src":"114:50:5"},"nodeType":"YulIf","src":"111:70:5"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:5","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:5","type":""}],"src":"14:173:5"},{"body":{"nodeType":"YulBlock","src":"279:167:5","statements":[{"body":{"nodeType":"YulBlock","src":"325:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"337:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"327:6:5"},"nodeType":"YulFunctionCall","src":"327:12:5"},"nodeType":"YulExpressionStatement","src":"327:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"300:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"309:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"296:3:5"},"nodeType":"YulFunctionCall","src":"296:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"321:2:5","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"292:3:5"},"nodeType":"YulFunctionCall","src":"292:32:5"},"nodeType":"YulIf","src":"289:52:5"},{"nodeType":"YulAssignment","src":"350:39:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"379:9:5"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"360:18:5"},"nodeType":"YulFunctionCall","src":"360:29:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"350:6:5"}]},{"nodeType":"YulAssignment","src":"398:42:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"425:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"436:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"421:3:5"},"nodeType":"YulFunctionCall","src":"421:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"408:12:5"},"nodeType":"YulFunctionCall","src":"408:32:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"398:6:5"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"237:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"248:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"260:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"268:6:5","type":""}],"src":"192:254:5"},{"body":{"nodeType":"YulBlock","src":"546:92:5","statements":[{"nodeType":"YulAssignment","src":"556:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"568:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"579:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"564:3:5"},"nodeType":"YulFunctionCall","src":"564:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"556:4:5"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"598:9:5"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"623:6:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"616:6:5"},"nodeType":"YulFunctionCall","src":"616:14:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"609:6:5"},"nodeType":"YulFunctionCall","src":"609:22:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"591:6:5"},"nodeType":"YulFunctionCall","src":"591:41:5"},"nodeType":"YulExpressionStatement","src":"591:41:5"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"515:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"526:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"537:4:5","type":""}],"src":"451:187:5"},{"body":{"nodeType":"YulBlock","src":"744:76:5","statements":[{"nodeType":"YulAssignment","src":"754:26:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"766:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"777:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:5"},"nodeType":"YulFunctionCall","src":"762:18:5"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"754:4:5"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"796:9:5"},{"name":"value0","nodeType":"YulIdentifier","src":"807:6:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"789:6:5"},"nodeType":"YulFunctionCall","src":"789:25:5"},"nodeType":"YulExpressionStatement","src":"789:25:5"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"713:9:5","type":""},{"name":"value0","nodeType":"YulTypedName","src":"724:6:5","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"735:4:5","type":""}],"src":"643:177:5"},{"body":{"nodeType":"YulBlock","src":"929:224:5","statements":[{"body":{"nodeType":"YulBlock","src":"975:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"984:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"987:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"977:6:5"},"nodeType":"YulFunctionCall","src":"977:12:5"},"nodeType":"YulExpressionStatement","src":"977:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"950:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"959:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"946:3:5"},"nodeType":"YulFunctionCall","src":"946:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"971:2:5","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"942:3:5"},"nodeType":"YulFunctionCall","src":"942:32:5"},"nodeType":"YulIf","src":"939:52:5"},{"nodeType":"YulAssignment","src":"1000:39:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1029:9:5"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1010:18:5"},"nodeType":"YulFunctionCall","src":"1010:29:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1000:6:5"}]},{"nodeType":"YulAssignment","src":"1048:48:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1081:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1092:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1077:3:5"},"nodeType":"YulFunctionCall","src":"1077:18:5"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1058:18:5"},"nodeType":"YulFunctionCall","src":"1058:38:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1048:6:5"}]},{"nodeType":"YulAssignment","src":"1105:42:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1132:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1143:2:5","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1128:3:5"},"nodeType":"YulFunctionCall","src":"1128:18:5"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1115:12:5"},"nodeType":"YulFunctionCall","src":"1115:32:5"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1105:6:5"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"879:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"890:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"902:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"910:6:5","type":""},{"name":"value2","nodeType":"YulTypedName","src":"918:6:5","type":""}],"src":"825:328:5"},{"body":{"nodeType":"YulBlock","src":"1228:116:5","statements":[{"body":{"nodeType":"YulBlock","src":"1274:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:5"},"nodeType":"YulFunctionCall","src":"1276:12:5"},"nodeType":"YulExpressionStatement","src":"1276:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1249:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"1258:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1245:3:5"},"nodeType":"YulFunctionCall","src":"1245:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"1270:2:5","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1241:3:5"},"nodeType":"YulFunctionCall","src":"1241:32:5"},"nodeType":"YulIf","src":"1238:52:5"},{"nodeType":"YulAssignment","src":"1299:39:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1328:9:5"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1309:18:5"},"nodeType":"YulFunctionCall","src":"1309:29:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:5"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1194:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1205:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1217:6:5","type":""}],"src":"1158:186:5"},{"body":{"nodeType":"YulBlock","src":"1436:173:5","statements":[{"body":{"nodeType":"YulBlock","src":"1482:16:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1491:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1494:1:5","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1484:6:5"},"nodeType":"YulFunctionCall","src":"1484:12:5"},"nodeType":"YulExpressionStatement","src":"1484:12:5"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1457:7:5"},{"name":"headStart","nodeType":"YulIdentifier","src":"1466:9:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1453:3:5"},"nodeType":"YulFunctionCall","src":"1453:23:5"},{"kind":"number","nodeType":"YulLiteral","src":"1478:2:5","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1449:3:5"},"nodeType":"YulFunctionCall","src":"1449:32:5"},"nodeType":"YulIf","src":"1446:52:5"},{"nodeType":"YulAssignment","src":"1507:39:5","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1536:9:5"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1517:18:5"},"nodeType":"YulFunctionCall","src":"1517:29:5"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1507:6:5"}]},{"nodeType":"YulAssignment","src":"1555:48:5","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1588:9:5"},{"kind":"number","nodeType":"YulLiteral","src":"1599:2:5","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1584:3:5"},"nodeType":"YulFunctionCall","src":"1584:18:5"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1565:18:5"},"nodeType":"YulFunctionCall","src":"1565:38:5"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1555:6:5"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1394:9:5","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1405:7:5","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1417:6:5","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1425:6:5","type":""}],"src":"1349:260:5"},{"body":{"nodeType":"YulBlock","src":"1646:95:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1663:1:5","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1670:3:5","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1675:10:5","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1666:3:5"},"nodeType":"YulFunctionCall","src":"1666:20:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1656:6:5"},"nodeType":"YulFunctionCall","src":"1656:31:5"},"nodeType":"YulExpressionStatement","src":"1656:31:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1703:1:5","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1706:4:5","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1696:6:5"},"nodeType":"YulFunctionCall","src":"1696:15:5"},"nodeType":"YulExpressionStatement","src":"1696:15:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1727:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1730:4:5","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1720:6:5"},"nodeType":"YulFunctionCall","src":"1720:15:5"},"nodeType":"YulExpressionStatement","src":"1720:15:5"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"1614:127:5"},{"body":{"nodeType":"YulBlock","src":"1795:79:5","statements":[{"nodeType":"YulAssignment","src":"1805:17:5","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1817:1:5"},{"name":"y","nodeType":"YulIdentifier","src":"1820:1:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1813:3:5"},"nodeType":"YulFunctionCall","src":"1813:9:5"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"1805:4:5"}]},{"body":{"nodeType":"YulBlock","src":"1846:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"1848:16:5"},"nodeType":"YulFunctionCall","src":"1848:18:5"},"nodeType":"YulExpressionStatement","src":"1848:18:5"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"1837:4:5"},{"name":"x","nodeType":"YulIdentifier","src":"1843:1:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1834:2:5"},"nodeType":"YulFunctionCall","src":"1834:11:5"},"nodeType":"YulIf","src":"1831:37:5"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"1777:1:5","type":""},{"name":"y","nodeType":"YulTypedName","src":"1780:1:5","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"1786:4:5","type":""}],"src":"1746:128:5"},{"body":{"nodeType":"YulBlock","src":"1927:77:5","statements":[{"nodeType":"YulAssignment","src":"1937:16:5","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1948:1:5"},{"name":"y","nodeType":"YulIdentifier","src":"1951:1:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1944:3:5"},"nodeType":"YulFunctionCall","src":"1944:9:5"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"1937:3:5"}]},{"body":{"nodeType":"YulBlock","src":"1976:22:5","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"1978:16:5"},"nodeType":"YulFunctionCall","src":"1978:18:5"},"nodeType":"YulExpressionStatement","src":"1978:18:5"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"1968:1:5"},{"name":"sum","nodeType":"YulIdentifier","src":"1971:3:5"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1965:2:5"},"nodeType":"YulFunctionCall","src":"1965:10:5"},"nodeType":"YulIf","src":"1962:36:5"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"1910:1:5","type":""},{"name":"y","nodeType":"YulTypedName","src":"1913:1:5","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"1919:3:5","type":""}],"src":"1879:125:5"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n}","id":5,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100625760003560e01c8063095ea7b31461006757806318160ddd1461008f57806323b872dd146100a157806370a08231146100b4578063a9059cbb146100dd578063dd62ed3e146100f0575b600080fd5b61007a6100753660046102fb565b610129565b60405190151581526020015b60405180910390f35b6000545b604051908152602001610086565b61007a6100af366004610325565b610196565b6100936100c2366004610361565b6001600160a01b031660009081526001602052604090205490565b61007a6100eb3660046102fb565b6101fb565b6100936100fe36600461037c565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b3360008181526002602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906101849086815260200190565b60405180910390a35060015b92915050565b6001600160a01b03831660009081526002602090815260408083203384529091528120546101c4908361020f565b6001600160a01b03851660009081526002602090815260408083203384529091529020556101f384848461021b565b949350505050565b600061020833848461021b565b9392505050565b600061020882846103c5565b6001600160a01b03831660009081526001602052604081205461023e908361020f565b6001600160a01b03808616600090815260016020526040808220939093559085168152205461026d90836102d3565b6001600160a01b0380851660008181526001602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906102c19086815260200190565b60405180910390a35060019392505050565b600061020882846103d8565b80356001600160a01b03811681146102f657600080fd5b919050565b6000806040838503121561030e57600080fd5b610317836102df565b946020939093013593505050565b60008060006060848603121561033a57600080fd5b610343846102df565b9250610351602085016102df565b9150604084013590509250925092565b60006020828403121561037357600080fd5b610208826102df565b6000806040838503121561038f57600080fd5b610398836102df565b91506103a6602084016102df565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610190576101906103af565b80820180821115610190576101906103af56fea2646970667358221220eb9aeebb2bea9a5ab2b9025645fefbde4dfd43eab989f27d2e857a5b9e57624a64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x8F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xDD JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0xF0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FB JUMP JUMPDEST PUSH2 0x129 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x86 JUMP JUMPDEST PUSH2 0x7A PUSH2 0xAF CALLDATASIZE PUSH1 0x4 PUSH2 0x325 JUMP JUMPDEST PUSH2 0x196 JUMP JUMPDEST PUSH2 0x93 PUSH2 0xC2 CALLDATASIZE PUSH1 0x4 PUSH2 0x361 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x7A PUSH2 0xEB CALLDATASIZE PUSH1 0x4 PUSH2 0x2FB JUMP JUMPDEST PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x93 PUSH2 0xFE CALLDATASIZE PUSH1 0x4 PUSH2 0x37C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE MLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x184 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x1C4 SWAP1 DUP4 PUSH2 0x20F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE PUSH2 0x1F3 DUP5 DUP5 DUP5 PUSH2 0x21B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208 CALLER DUP5 DUP5 PUSH2 0x21B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208 DUP3 DUP5 PUSH2 0x3C5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x23E SWAP1 DUP4 PUSH2 0x20F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x26D SWAP1 DUP4 PUSH2 0x2D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP7 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x2C1 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208 DUP3 DUP5 PUSH2 0x3D8 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x317 DUP4 PUSH2 0x2DF JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x33A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x343 DUP5 PUSH2 0x2DF JUMP JUMPDEST SWAP3 POP PUSH2 0x351 PUSH1 0x20 DUP6 ADD PUSH2 0x2DF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x208 DUP3 PUSH2 0x2DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x398 DUP4 PUSH2 0x2DF JUMP JUMPDEST SWAP2 POP PUSH2 0x3A6 PUSH1 0x20 DUP5 ADD PUSH2 0x2DF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x190 JUMPI PUSH2 0x190 PUSH2 0x3AF JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x190 JUMPI PUSH2 0x190 PUSH2 0x3AF JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB SWAP11 0xEE 0xBB 0x2B 0xEA SWAP11 GAS 0xB2 0xB9 MUL JUMP GASLIMIT INVALID 0xFB 0xDE 0x4D REVERT NUMBER 0xEA 0xB9 DUP10 CALLCODE PUSH30 0x2E857A5B9E57624A64736F6C634300081100330000000000000000000000 ","sourceMap":"176:1599:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1311:233;;;;;;:::i;:::-;;:::i;:::-;;;616:14:5;;609:22;591:41;;579:2;564:18;1311:233:4;;;;;;;;474:90;520:7;545:12;474:90;;;789:25:5;;;777:2;762:18;474:90:4;643:177:5;1550:223:4;;;;;;:::i;:::-;;:::i;574:127::-;;;;;;:::i;:::-;-1:-1:-1;;;;;671:23:4;638:15;671:23;;;:9;:23;;;;;;;574:127;983:134;;;;;;:::i;:::-;;:::i;1127:176::-;;;;;;:::i;:::-;-1:-1:-1;;;;;1256:23:4;;;1217:21;1256:23;;;:8;:23;;;;;;;;:40;;;;;;;;;;;;;1127:176;1311:233;1419:10;1387:12;1410:20;;;:8;:20;;;;;;;;-1:-1:-1;;;;;1410:37:4;;;;;;;;;;:46;;;1471:45;1387:12;;1410:37;;1471:45;;;;1450:6;789:25:5;;777:2;762:18;;643:177;1471:45:4;;;;;;;;-1:-1:-1;1533:4:4;1311:233;;;;;:::o;1550:223::-;-1:-1:-1;;;;;1684:14:4;;1632:12;1684:14;;;:8;:14;;;;;;;;1699:10;1684:26;;;;;;;;:38;;1715:6;1684:30;:38::i;:::-;-1:-1:-1;;;;;1655:14:4;;;;;;:8;:14;;;;;;;;1670:10;1655:26;;;;;;;:67;1739:27;1664:4;1755:2;1759:6;1739:9;:27::i;:::-;1732:34;1550:223;-1:-1:-1;;;;1550:223:4:o;983:134::-;1047:12;1077:33;1087:10;1099:2;1103:6;1077:9;:33::i;:::-;1070:40;983:134;-1:-1:-1;;;983:134:4:o;3122:96:2:-;3180:7;3206:5;3210:1;3206;:5;:::i;707:267:4:-;-1:-1:-1;;;;;827:15:4;;786:12;827:15;;;:9;:15;;;;;;:27;;847:6;827:19;:27::i;:::-;-1:-1:-1;;;;;809:15:4;;;;;;;:9;:15;;;;;;:45;;;;880:13;;;;;;;:25;;898:6;880:17;:25::i;:::-;-1:-1:-1;;;;;864:13:4;;;;;;;:9;:13;;;;;;;:41;;;;920:26;;;;;;;;;;939:6;789:25:5;;777:2;762:18;;643:177;920:26:4;;;;;;;;-1:-1:-1;963:4:4;707:267;;;;;:::o;2755:96:2:-;2813:7;2839:5;2843:1;2839;:5;:::i;14:173:5:-;82:20;;-1:-1:-1;;;;;131:31:5;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;360:29;379:9;360:29;:::i;:::-;350:39;436:2;421:18;;;;408:32;;-1:-1:-1;;;192:254:5:o;825:328::-;902:6;910;918;971:2;959:9;950:7;946:23;942:32;939:52;;;987:1;984;977:12;939:52;1010:29;1029:9;1010:29;:::i;:::-;1000:39;;1058:38;1092:2;1081:9;1077:18;1058:38;:::i;:::-;1048:48;;1143:2;1132:9;1128:18;1115:32;1105:42;;825:328;;;;;:::o;1158:186::-;1217:6;1270:2;1258:9;1249:7;1245:23;1241:32;1238:52;;;1286:1;1283;1276:12;1238:52;1309:29;1328:9;1309:29;:::i;1349:260::-;1417:6;1425;1478:2;1466:9;1457:7;1453:23;1449:32;1446:52;;;1494:1;1491;1484:12;1446:52;1517:29;1536:9;1517:29;:::i;:::-;1507:39;;1565:38;1599:2;1588:9;1584:18;1565:38;:::i;:::-;1555:48;;1349:260;;;;;:::o;1614:127::-;1675:10;1670:3;1666:20;1663:1;1656:31;1706:4;1703:1;1696:15;1730:4;1727:1;1720:15;1746:128;1813:9;;;1834:11;;;1831:37;;;1848:18;;:::i;1879:125::-;1944:9;;;1965:10;;;1962:36;;;1978:18;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"211400","executionCost":"44543","totalCost":"255943"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"24467","balanceOf(address)":"2581","totalSupply()":"2281","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allow_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approve_address\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remain_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approve_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"your_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\ncontract ERC20 is IERC20{\\n    using SafeMath for uint256;\\n    \\n    uint256 private _totalSupply;\\n    mapping(address => uint256)  _balances;\\n    mapping(address => mapping(address => uint256)) _approve;\\n    constructor(){\\n        _balances[msg.sender]=10000;\\n        _totalSupply=10000;\\n    }\\n\\n    function totalSupply() external view returns (uint256){\\n        return _totalSupply;\\n    }\\n    \\n    function balanceOf(address your_address) external view returns (uint256 balance){\\n        return _balances[your_address];\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal returns (bool success){\\n        _balances[from] = _balances[from].sub(amount);\\n        _balances[to] = _balances[to].add(amount);\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }   \\n\\n    function transfer(address to, uint256 amount) external returns (bool success){\\n        return _transfer(msg.sender, to, amount);\\n    }\\n    \\n    function allowance(address allow_address, address approve_address) external view returns (uint256 remain_amount){\\n        return _approve[allow_address][approve_address];\\n    }\\n  \\n    function approve(address approve_address, uint256 amount) external returns (bool success){\\n        _approve[msg.sender][approve_address] = amount;\\n        emit Approval(msg.sender, approve_address, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool success){\\n        _approve[from][msg.sender] = _approve[from][msg.sender].sub(amount);\\n        return _transfer(from, to, amount);\\n    }\\n}\",\"keccak256\":\"0x76ae0ad9803961efce0456771d0cbe37683329c061c5ed9b8f17bc253c6ed426\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":530,"contract":"contracts/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"0","type":"t_uint256"},{"astId":534,"contract":"contracts/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"1","type":"t_mapping(t_address,t_uint256)"},{"astId":540,"contract":"contracts/ERC20.sol:ERC20","label":"_approve","offset":0,"slot":"2","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}